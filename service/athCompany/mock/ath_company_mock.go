// Automatically generated by MockGen. DO NOT EDIT!
// Source: backend/service/athCompany (interfaces: AthCompanyService)

package mock

import (
	io "backend/pkg/io"
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// Mock of AthCompanyService interface
type MockAthCompanyService struct {
	ctrl     *gomock.Controller
	recorder *_MockAthCompanyServiceRecorder
}

// Recorder for MockAthCompanyService (not exported)
type _MockAthCompanyServiceRecorder struct {
	mock *MockAthCompanyService
}

func NewMockAthCompanyService(ctrl *gomock.Controller) *MockAthCompanyService {
	mock := &MockAthCompanyService{ctrl: ctrl}
	mock.recorder = &_MockAthCompanyServiceRecorder{mock}
	return mock
}

func (_m *MockAthCompanyService) EXPECT() *_MockAthCompanyServiceRecorder {
	return _m.recorder
}

func (_m *MockAthCompanyService) Createcompany(_param0 context.Context, _param1 io.AthCompany) io.Response {
	ret := _m.ctrl.Call(_m, "Createcompany", _param0, _param1)
	ret0, _ := ret[0].(io.Response)
	return ret0
}

func (_mr *_MockAthCompanyServiceRecorder) Createcompany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Createcompany", arg0, arg1)
}

func (_m *MockAthCompanyService) CreatecompanyUser(_param0 context.Context, _param1 io.AthCompanyUser) io.Response {
	ret := _m.ctrl.Call(_m, "CreatecompanyUser", _param0, _param1)
	ret0, _ := ret[0].(io.Response)
	return ret0
}

func (_mr *_MockAthCompanyServiceRecorder) CreatecompanyUser(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatecompanyUser", arg0, arg1)
}

func (_m *MockAthCompanyService) EditCompany(_param0 context.Context, _param1 io.AthCompany) io.Response {
	ret := _m.ctrl.Call(_m, "EditCompany", _param0, _param1)
	ret0, _ := ret[0].(io.Response)
	return ret0
}

func (_mr *_MockAthCompanyServiceRecorder) EditCompany(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EditCompany", arg0, arg1)
}
