// Automatically generated by MockGen. DO NOT EDIT!
// Source: backend/service/athOtp (interfaces: AthOtpService)

package mock

import (
	io "backend/pkg/io"
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// Mock of AthOtpService interface
type MockAthOtpService struct {
	ctrl     *gomock.Controller
	recorder *_MockAthOtpServiceRecorder
}

// Recorder for MockAthOtpService (not exported)
type _MockAthOtpServiceRecorder struct {
	mock *MockAthOtpService
}

func NewMockAthOtpService(ctrl *gomock.Controller) *MockAthOtpService {
	mock := &MockAthOtpService{ctrl: ctrl}
	mock.recorder = &_MockAthOtpServiceRecorder{mock}
	return mock
}

func (_m *MockAthOtpService) EXPECT() *_MockAthOtpServiceRecorder {
	return _m.recorder
}

func (_m *MockAthOtpService) CreateOTP(_param0 context.Context, _param1 io.AthUserOTP) io.Response {
	ret := _m.ctrl.Call(_m, "CreateOTP", _param0, _param1)
	ret0, _ := ret[0].(io.Response)
	return ret0
}

func (_mr *_MockAthOtpServiceRecorder) CreateOTP(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOTP", arg0, arg1)
}

func (_m *MockAthOtpService) VerifyOTP(_param0 context.Context, _param1 io.Verify) io.Response {
	ret := _m.ctrl.Call(_m, "VerifyOTP", _param0, _param1)
	ret0, _ := ret[0].(io.Response)
	return ret0
}

func (_mr *_MockAthOtpServiceRecorder) VerifyOTP(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyOTP", arg0, arg1)
}
